package Gui;

import finalproject.ChangeoverCost;
import finalproject.EdgeColoring;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;
import finalproject.Graphs;
import static finalproject.ReadColorCost.readColorFile;
import finalproject.SpanningTree;
import static Gui.Display.display;
import finalproject.Nodes;
import java.time.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class Gui extends javax.swing.JFrame {

    Graphs g;

    /**
     * Creates new form Gui
     */
    public Gui() {
        g = new Graphs("A");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        totalCostPane = new javax.swing.JEditorPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        totalcostPane = new javax.swing.JEditorPane();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();

        jScrollPane2.setViewportView(totalCostPane);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Random Spanning Tree & Random Edge Coloring");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Random Spanning Tree & Minimum Edge Coloring");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Minimum Spanning Tree & Minimum Edge Coloring");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(totalcostPane);

        jButton4.setText("Create Graph and Show");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Current Time For Calculation");

        jScrollPane5.setViewportView(jEditorPane1);

        jLabel2.setText("Cost of Sample Graph");

        jLabel3.setText("Node Number");

        jButton5.setText("Show Chart");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8))
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Gui gui = new Gui();
         if(g.nodeNumber==0){
             JOptionPane.showMessageDialog(null, "Please, create a graph firstly.");
            return;
        }
        Instant before = Instant.now();
        SpanningTree st = new SpanningTree(g);
        // createGraph(Integer.parseInt(jTextField1.getText()));
//        try {
//            gui.readGraphFile("Nodes.txt");
//        } catch (IOException ex) {
//            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
//        }
      //  System.out.println("RANDOM SPANNIG TREE AND MINIMUM EDGE COLORING");
        Graphs stg = st.randomSpanningTree(1);
        EdgeColoring ecc2 = new EdgeColoring(stg);
        ecc2.minEdgeColoring();
        // edgesPane.setText(stg.print("edges"));
        ChangeoverCost c = new ChangeoverCost(stg);
        c.calculateCost();
        totalcostPane.setText(c.print());
        Instant after = Instant.now();
        long delta = Duration.between(before, after).toMillis();
        jEditorPane1.setText("" + delta);
        display(stg);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //Gui gui = new Gui();
        if(g.nodeNumber==0){
            JOptionPane.showMessageDialog(null, "Please, create a graph firstly.");
            return;
        }
        Instant before = Instant.now();
        SpanningTree st = new SpanningTree(g);
        // createGraph(Integer.parseInt(jTextField1.getText()));
//        try {
//            gui.readGraphFile("Nodes.txt");
//        } catch (IOException ex) {
//            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
//        }

        //System.out.println("MINIMUM SPANNIG TREE AND MINIMUM EDGE COLORING");
        Graphs mst = st.mst();
        EdgeColoring ecc = new EdgeColoring(mst);
        ecc.minEdgeColoring();
        //edgesPane.setText(mst.print("edges"));

        ChangeoverCost c = new ChangeoverCost(mst);
        c.calculateCost();
        totalcostPane.setText(c.print());
        Instant after = Instant.now();
        long delta = Duration.between(before, after).toMillis();
        jEditorPane1.setText("" + delta);
        display(mst);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //Gui gui = new Gui();
         if(g.nodeNumber==0){
            JOptionPane.showMessageDialog(null, "Please, create a graph firstly.");
            return;
        }
        Instant before = Instant.now();
        SpanningTree st = new SpanningTree(g);

//    try {
//        gui.readGraphFile("Nodes.txt");
//        
//    } catch (IOException ex) {
//        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
//    }
     //   System.out.println("RANDOM SPANNIG TREE AND RANDOM EDGE COLORING");
        Graphs rst = st.randomSpanningTree(1);
        EdgeColoring ecc1 = new EdgeColoring(rst);
        ecc1.randomEdgeColoring();
        // edgesPane.setText(rst.print("edges"));
        ChangeoverCost c = new ChangeoverCost(rst);
        c.calculateCost();
        totalcostPane.setText(c.print());

        Instant after = Instant.now();
        long delta = Duration.between(before, after).toMillis();
        jEditorPane1.setText("" + delta);
        display(rst);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        // Gui gui = new Gui();
        if(jTextField1.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please, enter number of nodes to create a graph.");
           
            return;
        }
        g = new Graphs("A");
        createGraph(Integer.parseInt(jTextField1.getText()));
        display(g);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        new LineChart_AWT().setVisible(true);

//      chart.pack( );
//      RefineryUtilities.centerFrameOnScreen( chart );
//      chart.setVisible( true );

    }//GEN-LAST:event_jButton5ActionPerformed

    public void readGraphFile(String adress) throws FileNotFoundException, IOException {

        BufferedReader br = new BufferedReader(new FileReader(adress));
        String line = br.readLine();

        while (line != null) {
            StringTokenizer st = new StringTokenizer(line, " ");

            while (st.hasMoreTokens()) {
                String node1 = st.nextToken();
                String node2 = st.nextToken();

                g.addto_Graph(node1, node2);
            }

            line = br.readLine();
        }

    }

    public void createGraph(int nodeNumber) {

        String[] nodes = {
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
            "O", "Q", "P", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            "A*", "B*", "C*", "D*", "E*", "F*", "G*", "H*", "I*", "J*", "K*", "L*", "M*", "N*",
            "O*", "Q*", "P*", "R*", "S*", "T*", "U*", "V*", "W*", "X*", "Y*", "Z*",
            "A#", "B#", "C#", "D#", "E#", "F#", "G#", "H#", "I#", "J#", "K#", "L#", "M#", "N#",
            "O#", "Q#", "P#", "R#", "S#", "T#", "U#", "V#", "W#", "X#", "Y#", "Z#",
            "A$", "B$", "C$", "D$", "E$", "F$", "G$", "H$", "I$", "J$", "K$", "L$", "M$", "N$",
            "O$", "Q$", "P$", "R$", "S$", "T$", "U$", "V$", "W$", "X$", "Y$", "Z$",};

        g.addto_Graph(nodes[0], nodes[1]);

        double r;
        String s;

        while (nodeNumber > g.nodeNumber) {
          
            for (int j = 0; j < nodeNumber; j++) {

                int i = getNodeofMinEdgeNumber(g.nodeList);
                r = Math.random();
                if (i == -1) {
                    System.out.println("Nodes receive max edge number. Cannot add more new nodes!");
                    System.out.println("Node number: " + g.nodeList.size());
                    return;
                }
               s = g.nodeList.get(i).label;
                if (r >= 0.5 && !s.equals(nodes[j])) {
                    g.addto_Graph(s, nodes[j]);

                }

                if (nodeNumber <= g.nodeNumber) {
                    System.out.println("Node number: " + g.nodeList.size());
                    break;
                }

            }

        }

    }

    public int getNodeofMinEdgeNumber(ArrayList<Nodes> nodeList) {
        int index = -1;
        int min = 5;
        for (int i = 0; i < nodeList.size(); i++) {
            if (nodeList.get(i).edgeSize < min) {
                index = i;
                min = nodeList.get(i).edgeSize;
            }
        }
        return index;
    }
    
    public boolean contains(String label){
        for (int i = 0; i < g.nodeList.size(); i++) {
            if(g.nodeList.get(i).label.equals(label)){
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Gui gui = new Gui();
        /* Create and display the form */
        readColorFile("Colors.txt");
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JEditorPane totalCostPane;
    private javax.swing.JEditorPane totalcostPane;
    // End of variables declaration//GEN-END:variables
}
